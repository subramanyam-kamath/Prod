run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: 
  workflow_dispatch:
  push:
   branches:
      - "main"
   paths:
      - "force-app/**"

env:
   GH_TOKEN: ${{ secrets.GITHUB_TOKEN}}

jobs:
    Getting-the-export-files:
     runs-on: ubuntu-latest
     environment: QA-Branch

     outputs:
         csv_file_in_repo: ${{steps.vars.outputs.test}}

        
     
     steps:            
      - uses: actions/setup-node@v3
        with:
         node-version: '14'

      - name: "Checkout source code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
                
      

      - name: Get CSV file names
        id: vars
        run: echo "test= $(find files/ -name "*.csv"  | sed 's/.csv/.csv",/g'| sed 's/files//g' | sed 's/[/]//g' |paste -sd '"' | sed  -e 's/^/"/'   | sed 's/^/[/' | sed 's/"$//g'| sed 's/.$//' | sed  s/$/]/) "  >>  "$GITHUB_OUTPUT"


    job2:
      runs-on: ubuntu-latest
      needs: Getting-the-export-files
      steps:
      - env:
          OUTPUT1: ${{needs.Getting-the-export-files.outputs.csv_file_in_repo}}
          
        run: echo "$OUTPUT1"

    validate-deployment-on-QA-org:
        needs: Getting-the-export-files
        runs-on: ubuntu-latest
        environment: QA-Branch
        strategy:
         matrix:
          version:  ${{ fromJson(needs.Getting-the-export-files.outputs.csv_file_in_repo)}}
        steps:            
        - uses: actions/setup-node@v3
          with:
                node-version: '14'

        - name: 'Checkout source code'
          uses: actions/checkout@v3
          with:
             fetch-depth: 0       
            

                        
            
        - name: 'Install Salesforce CLI'
          run: |
              wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
              mkdir ~/sfdx
              tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
              echo "$HOME/sfdx/bin" >> $GITHUB_PATH
              ~/sfdx/bin/sfdx version

           
        - name: 'Installing sfdx git delta'
          run: | 
            echo y | sfdx plugins:install sfdx-git-delta
            sfdx plugins 

            
        - name: 'Installing java'
          run: |
                sudo apt-get update
                sudo apt install default-jdk

            
        - name: 'Installing SFDX scanner'
          run: sfdx plugins:install @salesforce/sfdx-scanner

        - name: echo csv files
          run: echo ${{needs.Getting-the-export-files.outputs.csv_file_in_repo}}

            
        - name: Decrypt the server.key.enc file & store inside assets folder
          run: openssl enc -nosalt -aes-256-cbc -d -in ${{ secrets.ENCRYPTION_KEY_FILE }} -out ${{ secrets.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}
              

            
        - name: Authenticate Salesforce ORG
          run: |
                sfdx force:auth:jwt:grant --clientid ${{ secrets.HUB_CONSUMER_KEY }} --jwtkeyfile ${{ secrets.JWT_KEY_FILE }} --username ${{ secrets.HUB_USER_NAME }} --setdefaultdevhubusername -a HubOrg

        - name: Identify Deleted Files
          id: deleted-files
          run: |
                # Capture deleted files into a variables
                deleted_files=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.sha }})
                echo "Deleted files: $deleted_files"
        - name: Passing the test class names to Env variable
          run: echo "Del_files_to_env= ${{ steps.vars.outputs.deleted-files }}" >> $GITHUB_ENV   

        - name: Generate the package.xml for destructive delta files
          run: |
                   mkdir destructive_delta
                   sfdx sgd:source:delta --from origin/Release/Pre-QA --output "./destructive_delta" --ignore-whitespace -d -i .sgdignore
                   echo "--- package.xml generated with added and modified metadata ---"
                   cat destructive_delta/package/package.xml
        - name: Validate destructive chages 
          if: ${{ env.Del_files_to_env != ' ' }}
          run: |
                 sf project deploy validate   --manifest destructive_delta/package/package.xml --test-level NoTestRun  --verbose --wait 30  --target-org PreQA
        - name: Validate destructive chages
          if: ${{ env.Del_files_to_env != ' ' }}
          run: |
                 sf project deploy start --dry-run --source-dir force-app --test-level NoTestRun --verbose --wait 30  --ignore-conflicts --ignore-warnings --target-org PreQA
