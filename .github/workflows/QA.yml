name: GitHub Actions QA Org
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: 
  workflow_dispatch: 


env:
   GH_TOKEN: ${{ secrets.GITHUB_TOKEN}}

jobs:   
    validate-deployment-on-QA-org:        
        runs-on: ubuntu-latest
        environment: QA-Branch
        steps:            
            - uses: actions/setup-node@v3
              with:
                node-version: '14'

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0       
            

            - name: 'Read commit Body'
              env:
                 PR_BODY: ${{ github.event.pull_request.body }}

             
              run: |
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt)       
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
                  
            
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

           
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            
            - name: 'Installing java'
              run: |
                sudo apt-get update
                sudo apt install default-jdk

            
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            
            - name: Decrypt the server.key.enc file & store inside assets folder
              run: openssl enc -nosalt -aes-256-cbc -d -in ${{ secrets.ENCRYPTION_KEY_FILE }} -out ${{ secrets.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}
              

            
            - name: Authenticate Salesforce ORG
              run: |
                sfdx force:auth:jwt:grant --clientid ${{ secrets.HUB_CONSUMER_KEY }} --jwtkeyfile ${{ secrets.JWT_KEY_FILE }} --username ${{ secrets.HUB_USER_NAME }} --setdefaultdevhubusername -a HubOrg

            - name: Get Apex test class names
              id: vars
              run: echo $(find . -type f -iregex '.*\.cls' -not -iregex '.*node\_modules.*' -exec grep -Eil --color '@IsTest' {} \; | grep -oE '[^/]*$' | sed 's/.cls//g' | sort | uniq | paste -sd " " -) >> testClassname.txt

            - name: Passing the test class names to Env variable
              run: echo "test_classes_in_repo= ${{ steps.vars.outputs.version }}" >> $GITHUB_ENV

            - name: Name of the apex test classes
              run: echo ${{env.test_classes_in_repo}}
            

            - name: Get all Accounts              
              run: |
                 echo $(sf apex run --file files/anonymouscode.apex --json --target-org HubOrg) >> codecoverage.txt
                
            
            - name: Passing the async summary to environment variable.
              id: vars2
              run: |
               cat codecoverage.txt
               echo "apexclassid= $(cat codecoverage.txt | grep -o "|DEBUG|.................." |sed 's/|DEBUG|//g' | grep -o "01p..............."   | uniq | sed 's/01p.............../&'"'"',/g' | paste -sd "'" |  sed 's/'"'"',$//g' |  sed  's/$/'"'"'/' |  sed 's/^/'"'"'/' )" >> $GITHUB_OUTPUT

            - name: Passig again async summary.
              id: vars5
              run: echo "apexclassid2= $(cat codecoverage.txt | grep -o "|DEBUG|.................." |sed 's/DEBUG|//g' )"
              
            - name: Echo the variable.
              run: |
              
               echo ${{ steps.vars2.outputs.apexclassid }}
              
                
            - name: run apex query.
              run: echo $(sf data query --query "SELECT ApexClassOrTrigger.Name FROM ApexCodeCoverageAggregate WHERE ApexClassOrTriggerId IN (${{ steps.vars2.outputs.apexclassid }} )" -r csv --use-tooling-api   --target-org HubOrg) >> apexclassnames.txt

            - name: print <75 code coverage
              run: cat apexclassnames.txt | tr ' ' '\n' | sort -u > groupedClassesnames.txt 
              
            
            - name: Print the apex classes after exception.
              run:  cat groupedClassesnames.txt 
              
            - name: uniq the file.
              run: cat  uniqueclasses.txt | awk '!a[$0]++'

            - name: Run SOQL to filter the wrapper classes from the result.
              id: vars7
              run:  echo $(sf data query --query "SELECT ApexClassOrTrigger.Name FROM ApexCodeCoverage where ApexClassOrTrigger.Id IN ('01p5j00000LlbQF','01p5j00000LlfAa' )" -r human --use-tooling-api   --target-org HubOrg) >> wrapperclass.txt

            - name: trim the wroapper clas
              run: cat wrapperclass.txt | sed 's/APEXCLASSORTRIGGER.NAME â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€//g' | sed 's/Total number of records retrieved://g' | sed 's/1.//g' | tr ' ' '\n' | sort -u  > wrapper2.txt

            
            - name: echoing the ouptput
              run: diff -23 groupedClassesnames.txt wrapper.txt

            
            
